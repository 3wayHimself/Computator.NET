// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Make3dChartForMathieuFunction - Use 'Make3dChartForMathieuFunctionParams' to pass parameters into this method.
        /// </summary>
        public void Make3dChartForMathieuFunction()
        {
            #region Variable Declarations
            WinEdit uIExpressionTextBoxEdit = this.UIComputatorNETPawełTrWindow.UIExpressionTextBoxWindow.UIExpressionTextBoxEdit;
            WinRadioButton uIItem3DfxyRadioButton = this.UIComputatorNETPawełTrWindow.UIItem3DfxyWindow.UIItem3DfxyRadioButton;
            WinButton uIAddtochartButton = this.UIComputatorNETPawełTrWindow.UIAddtochartWindow.UIAddtochartButton;
            WinButton uICloseButton = this.UIComputatorNETPawełTrWindow.UIComputatorNETPawełTrTitleBar.UICloseButton;
            #endregion

            // Type 'MathieuCE(2,y,x)' in 'expressionTextBox' text box
            uIExpressionTextBoxEdit.Text = this.Make3dChartForMathieuFunctionParams.UIExpressionTextBoxEditText;

            // Select '3D : f(x,y)' radio button
            uIItem3DfxyRadioButton.Selected = this.Make3dChartForMathieuFunctionParams.UIItem3DfxyRadioButtonSelected;

            // Click 'Add to chart' button
            Mouse.Click(uIAddtochartButton, new Point(30, 24));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(33, 19));
        }
        
        #region Properties
        public virtual Make3dChartForMathieuFunctionParams Make3dChartForMathieuFunctionParams
        {
            get
            {
                if ((this.mMake3dChartForMathieuFunctionParams == null))
                {
                    this.mMake3dChartForMathieuFunctionParams = new Make3dChartForMathieuFunctionParams();
                }
                return this.mMake3dChartForMathieuFunctionParams;
            }
        }
        
        public UIComputatorNETPawełTrWindow UIComputatorNETPawełTrWindow
        {
            get
            {
                if ((this.mUIComputatorNETPawełTrWindow == null))
                {
                    this.mUIComputatorNETPawełTrWindow = new UIComputatorNETPawełTrWindow();
                }
                return this.mUIComputatorNETPawełTrWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private Make3dChartForMathieuFunctionParams mMake3dChartForMathieuFunctionParams;
        
        private UIComputatorNETPawełTrWindow mUIComputatorNETPawełTrWindow;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Make3dChartForMathieuFunction'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Make3dChartForMathieuFunctionParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'MathieuCE(2,y,x)' in 'expressionTextBox' text box
        /// </summary>
        public string UIExpressionTextBoxEditText = "MathieuCE(2,y,x)";
        
        /// <summary>
        /// Select '3D : f(x,y)' radio button
        /// </summary>
        public bool UIItem3DfxyRadioButtonSelected = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIComputatorNETPawełTrWindow : WinWindow
    {
        
        public UIComputatorNETPawełTrWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Computator.NET © Paweł Troka";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Computator.NET © Paweł Troka");
            #endregion
        }
        
        #region Properties
        public UIExpressionTextBoxWindow UIExpressionTextBoxWindow
        {
            get
            {
                if ((this.mUIExpressionTextBoxWindow == null))
                {
                    this.mUIExpressionTextBoxWindow = new UIExpressionTextBoxWindow(this);
                }
                return this.mUIExpressionTextBoxWindow;
            }
        }
        
        public UIItem3DfxyWindow UIItem3DfxyWindow
        {
            get
            {
                if ((this.mUIItem3DfxyWindow == null))
                {
                    this.mUIItem3DfxyWindow = new UIItem3DfxyWindow(this);
                }
                return this.mUIItem3DfxyWindow;
            }
        }
        
        public UIAddtochartWindow UIAddtochartWindow
        {
            get
            {
                if ((this.mUIAddtochartWindow == null))
                {
                    this.mUIAddtochartWindow = new UIAddtochartWindow(this);
                }
                return this.mUIAddtochartWindow;
            }
        }
        
        public UIComplexfzWindow UIComplexfzWindow
        {
            get
            {
                if ((this.mUIComplexfzWindow == null))
                {
                    this.mUIComplexfzWindow = new UIComplexfzWindow(this);
                }
                return this.mUIComplexfzWindow;
            }
        }
        
        public UIComputatorNETPawełTrTitleBar UIComputatorNETPawełTrTitleBar
        {
            get
            {
                if ((this.mUIComputatorNETPawełTrTitleBar == null))
                {
                    this.mUIComputatorNETPawełTrTitleBar = new UIComputatorNETPawełTrTitleBar(this);
                }
                return this.mUIComputatorNETPawełTrTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIExpressionTextBoxWindow mUIExpressionTextBoxWindow;
        
        private UIItem3DfxyWindow mUIItem3DfxyWindow;
        
        private UIAddtochartWindow mUIAddtochartWindow;
        
        private UIComplexfzWindow mUIComplexfzWindow;
        
        private UIComputatorNETPawełTrTitleBar mUIComputatorNETPawełTrTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIExpressionTextBoxWindow : WinWindow
    {
        
        public UIExpressionTextBoxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "expressionTextBox";
            this.WindowTitles.Add("Computator.NET © Paweł Troka");
            #endregion
        }
        
        #region Properties
        public WinEdit UIExpressionTextBoxEdit
        {
            get
            {
                if ((this.mUIExpressionTextBoxEdit == null))
                {
                    this.mUIExpressionTextBoxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIExpressionTextBoxEdit.WindowTitles.Add("Computator.NET © Paweł Troka");
                    #endregion
                }
                return this.mUIExpressionTextBoxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIExpressionTextBoxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItem3DfxyWindow : WinWindow
    {
        
        public UIItem3DfxyWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fxyModeRadioBox";
            this.WindowTitles.Add("Computator.NET © Paweł Troka");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIItem3DfxyRadioButton
        {
            get
            {
                if ((this.mUIItem3DfxyRadioButton == null))
                {
                    this.mUIItem3DfxyRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIItem3DfxyRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "3D : f(x,y)";
                    this.mUIItem3DfxyRadioButton.WindowTitles.Add("Computator.NET © Paweł Troka");
                    #endregion
                }
                return this.mUIItem3DfxyRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIItem3DfxyRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAddtochartWindow : WinWindow
    {
        
        public UIAddtochartWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "addToChartButton";
            this.WindowTitles.Add("Computator.NET © Paweł Troka");
            #endregion
        }
        
        #region Properties
        public WinButton UIAddtochartButton
        {
            get
            {
                if ((this.mUIAddtochartButton == null))
                {
                    this.mUIAddtochartButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAddtochartButton.SearchProperties[WinButton.PropertyNames.Name] = "Add to chart";
                    this.mUIAddtochartButton.WindowTitles.Add("Computator.NET © Paweł Troka");
                    #endregion
                }
                return this.mUIAddtochartButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAddtochartButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIComplexfzWindow : WinWindow
    {
        
        public UIComplexfzWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "complexNumbersModeRadioBox";
            this.WindowTitles.Add("Computator.NET © Paweł Troka");
            #endregion
        }
        
        #region Properties
        public WinRadioButton UIComplexfzRadioButton
        {
            get
            {
                if ((this.mUIComplexfzRadioButton == null))
                {
                    this.mUIComplexfzRadioButton = new WinRadioButton(this);
                    #region Search Criteria
                    this.mUIComplexfzRadioButton.SearchProperties[WinRadioButton.PropertyNames.Name] = "Complex : f(z)";
                    this.mUIComplexfzRadioButton.WindowTitles.Add("Computator.NET © Paweł Troka");
                    #endregion
                }
                return this.mUIComplexfzRadioButton;
            }
        }
        #endregion
        
        #region Fields
        private WinRadioButton mUIComplexfzRadioButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIComputatorNETPawełTrTitleBar : WinTitleBar
    {
        
        public UIComputatorNETPawełTrTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Computator.NET © Paweł Troka");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Computator.NET © Paweł Troka");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "DropDown";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            #endregion
        }
        
        #region Properties
        public WinClient UIDropDownClient
        {
            get
            {
                if ((this.mUIDropDownClient == null))
                {
                    this.mUIDropDownClient = new WinClient(this);
                }
                return this.mUIDropDownClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUIDropDownClient;
        #endregion
    }
}
